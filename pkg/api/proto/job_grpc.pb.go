// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartResponse, error)
	Stop(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*JobStopResponse, error)
	QueryStatus(ctx context.Context, in *JobQueryRequest, opts ...grpc.CallOption) (*JobInfo, error)
	GetOutput(ctx context.Context, in *JobQueryRequest, opts ...grpc.CallOption) (*JobOutputResponse, error)
	SubscribeOutput(ctx context.Context, in *JobSubscriptionRequest, opts ...grpc.CallOption) (JobService_SubscribeOutputClient, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartResponse, error) {
	out := new(JobStartResponse)
	err := c.cc.Invoke(ctx, "/api.JobService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) Stop(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*JobStopResponse, error) {
	out := new(JobStopResponse)
	err := c.cc.Invoke(ctx, "/api.JobService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) QueryStatus(ctx context.Context, in *JobQueryRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := c.cc.Invoke(ctx, "/api.JobService/QueryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetOutput(ctx context.Context, in *JobQueryRequest, opts ...grpc.CallOption) (*JobOutputResponse, error) {
	out := new(JobOutputResponse)
	err := c.cc.Invoke(ctx, "/api.JobService/GetOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) SubscribeOutput(ctx context.Context, in *JobSubscriptionRequest, opts ...grpc.CallOption) (JobService_SubscribeOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[0], "/api.JobService/SubscribeOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceSubscribeOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobService_SubscribeOutputClient interface {
	Recv() (*JobOutputResponse, error)
	grpc.ClientStream
}

type jobServiceSubscribeOutputClient struct {
	grpc.ClientStream
}

func (x *jobServiceSubscribeOutputClient) Recv() (*JobOutputResponse, error) {
	m := new(JobOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	Start(context.Context, *JobStartRequest) (*JobStartResponse, error)
	Stop(context.Context, *JobStopRequest) (*JobStopResponse, error)
	QueryStatus(context.Context, *JobQueryRequest) (*JobInfo, error)
	GetOutput(context.Context, *JobQueryRequest) (*JobOutputResponse, error)
	SubscribeOutput(*JobSubscriptionRequest, JobService_SubscribeOutputServer) error
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) Start(context.Context, *JobStartRequest) (*JobStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobServiceServer) Stop(context.Context, *JobStopRequest) (*JobStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobServiceServer) QueryStatus(context.Context, *JobQueryRequest) (*JobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStatus not implemented")
}
func (UnimplementedJobServiceServer) GetOutput(context.Context, *JobQueryRequest) (*JobOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutput not implemented")
}
func (UnimplementedJobServiceServer) SubscribeOutput(*JobSubscriptionRequest, JobService_SubscribeOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOutput not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Start(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Stop(ctx, req.(*JobStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_QueryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).QueryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/QueryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).QueryStatus(ctx, req.(*JobQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/GetOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetOutput(ctx, req.(*JobQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_SubscribeOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).SubscribeOutput(m, &jobServiceSubscribeOutputServer{stream})
}

type JobService_SubscribeOutputServer interface {
	Send(*JobOutputResponse) error
	grpc.ServerStream
}

type jobServiceSubscribeOutputServer struct {
	grpc.ServerStream
}

func (x *jobServiceSubscribeOutputServer) Send(m *JobOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobService_Stop_Handler,
		},
		{
			MethodName: "QueryStatus",
			Handler:    _JobService_QueryStatus_Handler,
		},
		{
			MethodName: "GetOutput",
			Handler:    _JobService_GetOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOutput",
			Handler:       _JobService_SubscribeOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "job.proto",
}
